<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ftp="http://www.mulesoft.org/schema/mule/ftp" xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp"
	xmlns:java="http://www.mulesoft.org/schema/mule/java"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:sap="http://www.mulesoft.org/schema/mule/sap" xmlns:xml-module="http://www.mulesoft.org/schema/mule/xml-module" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/xml-module http://www.mulesoft.org/schema/mule/xml-module/current/mule-xml-module.xsd
http://www.mulesoft.org/schema/mule/sap http://www.mulesoft.org/schema/mule/sap/current/mule-sap.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/ftp http://www.mulesoft.org/schema/mule/ftp/current/mule-ftp.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="085e0752-2c6b-46b4-8a4d-a6aff651f345" >
		<http:listener-connection host="0.0.0.0" port="8081" />
	</http:listener-config>
	<ftp:config name="FTP_Config" doc:name="FTP Config" doc:id="b159f7e1-8305-4e31-be7a-a095fe69deae" >
		<ftp:connection host="127.0.0.1" port="23" username="rn" password="123" workingDir="/output"/>
	</ftp:config>
	<configuration-properties doc:name="Configuration properties" doc:id="5e60cda7-ca6e-46fd-86e5-4e7cab9f9d80" file="my.yaml" />
	<flow name="dwFlow" doc:id="6c6664b0-f729-4df4-bbfe-7627919b5d7a" >
		<ee:transform doc:name="DataType And String" doc:id="cc6df15d-9653-4baa-afb6-6756aacd473c" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/dw

//global variable

var xchgRt = 0.75
fun func(xchgRt) = 1/xchgRt
type Currency  = String {format: "\$ ##,###.00"}
var dovar = do {
	
	//local varaible
	
	var KeyName = "Reponse"
---
KeyName
}

// array of objects

var cities = [{
	name: "Sydney",
	conversion: "1.50"
}, {
	name: "Cape Town",
	conversion: "18.50"
}, {
	name: "Hyderabad",
	conversion: "75"
}, {
	name: "New York",
	conversion: "1"
}]
---
{
	
	//dynamic key name and UD function call
	(dovar) : {
		"CityName" : upper("Current city is $(cities[1].name)"), 
		"Conversion" : func(cities[0].conversion) as Currency
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="MetaDataMapping" doc:id="66686e8f-82ea-4424-be3d-df13c30d306a" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	doj: payload.users.doj,
	userId: payload.users.id
} as Object {
	class : "dw.UserOutputModel"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<java:invoke-static method="HellowordLD()" doc:name="Invoke static" doc:id="8809b516-2ee1-4dc2-b575-e91375d1d072" class="dw.abc"/>
		<ee:transform doc:name="Selectors for working arrays and objects" doc:id="a19fa67c-343a-4408-9fc2-c2e3ec63e6cb" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var readStr = read(`<?xml version="1.0" encoding="UTF-8"?>
<wheels>	
	<cars xmlns="https://www.letslearnmule.com">
   	   <variant>sedan/suv</variant>
	   <car> 
	   		<brand model="Altima">Nissan</brand> 
	   		<years> 
	   			<variant>sedan</variant>
	   			<year>2019</year> 
	   			<year>2020</year> 
	   		</years> 
	   	</car>
	   <car> 
	   		<brand model="Model S">Tesla</brand> 
	   		<variant>sedan</variant>
	   		<years> 
	   			<year>2019</year> 
	   			<year>2020</year> 
	   		</years> 
	   	</car>
</cars>
</wheels>
`
, "application/xml"
)
---
{
	// use * to get all  values
	"response" : readStr.wheels.cars.*car,

		// use & to get key name and value
		"response" : readStr.wheels.cars.car.&brand,
		
		// use .. returns Array of values of any matching descendant keys
		"response" : readStr.wheels.cars.*car..brand,
		
		// use [x] x is index return value based on index
		"response" : readStr.wheels.cars.*car[1],
		
		// use @ String value of the selected attribute
		"response" : readStr.wheels.cars.car.brand.@model,
		
		// use # String value of the namespace for the selected key
		"response" : readStr.wheels.cars.car.brand.#,
		
		// use?, @type Boolean
		"response" : readStr.wheels.cars.car.brand?,
		
			// use ^ Returns the value of specified metadata for a Mule payload,
		"response" : readStr.wheels.cars.car.brand.^contentLength,
		
	//Switch case
	"response" : readStr.wheels.cars.car.brand match{
		case literalMatch: "Nissan" -> "JP"
		case literalMatch: "Tesla" -> "USA"
		else -> "NA"
	}
	
	
	}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Functions and lambda expression" doc:id="139e2b7d-a12c-4ce2-88d9-b8056c477edf" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json

var pincode ="" as String

fun checkpinc(pincode) = if(sizeOf(pincode) <6 ) 

"00" ++ pincode


	else
	pincode
fun func
(obj, pinc,funU,lambda)=  {
	"function" : {
		"name": obj.name,
		"doB" : lambda(obj.dob),
		"Address": funU( obj.address.street ++ ", " ++ obj.address.City ++ ", " ++
		pinc(obj.address.pincode))
	}
}
---
{
	
	// using functions and lambda expression as function parameter
	"OP": func({
		"name" : "rohit",
		"dob" : |2021-02-03|,
		"address": {
			"street": "ABC",
			"City": "Mandi",
			"pincode" : "1750"
		},
	}, checkpinc,upper, (x) -> x.year as String )
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Core module and use of operators with arrays and objects" doc:id="1aa0acd5-32ee-4d90-a013-d8b3eea708e1" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var employees = [
	"Ross Geller", 
	"Chandler Bing", 
	"Rachel Green", 
	"Joey Tribbiani"
]
var dateOfJoining = [
	|2015-01-01|, 
	|2010-10-10|, 
	|2012-03-25|, 
	|2018-09-28|
]
var contractors = [
	"Jake Peralta", 
	"Ron Swanson", 
	"Leslie Knope",
	"Joey Tribbiani"
]
var contractEndDate = [ 
	|2020-12-25|, 
	|2021-01-01|
]
var brands = [ {
	"brand": "Tesla"
}, {
	"brand": "BMW"
}, {
	"brand": "Lexus"
}]
var models = [{
	"brand": "Tesla",
	"vehicleType": "Sedan",
	"prices": {
		"Model S Price": "79490",
		"Model X Price": "84490",
		"Model 3 Price": "39990"
	}
},
{
	"brand": "BMW",
	"vehicleType": "SUV",
	"prices": {
		"M6 Convertible Price": "123295",
		"i8 Coupe Price": "148495",
		"8-Series Price": "112895"
	}
},
{
	"brand": "Lexus",
	"vehicleType": "Sedan",
	"prices": {
		"ES 2018 Price": "40000",
		"UX 2019 Price": "32150",
		"UX HYBRID Price": "34500"
	}
}]

var objEmmodelsployee = {
	"name": "Joey Tribbiani",
	"year": "2000",
	"location": "New York"
}
var objCar = {
	"name": "Joey Tribbiani",
	"car": "Tesla",
	"make": "2020",
	"price": "\$ 100,000"
}


---
	{
	//+ operator add new element in array
	"+ Operator" : {
		"employees + contractors":employees + contractors,
		"employees + objcar" : employees + objCar,
	},
				
	
	// ++ operator add combine two arrays
	"++ Operator" : employees ++ contractors,
	
	// - operator remove  element from array
	"- Operator" : employees - "Joey Tribbiani",
	
	// -- operator remove common elelments from two arrays
	"-- Operator" : employees -- contractors,
	
	"conatin fun" : employees
	
}

]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dwFlow1" doc:id="44a9166a-03cb-4989-b9a4-f569532d7093" >
		<ee:transform doc:name="filter and filterobjects" doc:id="cfde65f8-359f-4fb4-90e2-6fb0f58b9faa">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
var employees = [
	"Ross Geller", 
	"Chandler Bing", 
	"Rachel Green", 
	"Joey Tribbiani"
]
var dateOfJoining = [
	|2015-01-01|, 
	|2010-10-10|, 
	|2012-03-25|, 
	|2018-09-28|
]
var contractors = [
	"Jake Peralta", 
	"Ron Swanson", 
	"Leslie Knope",
	"Joey Tribbiani"
]
var contractEndDate = [ 
	|2020-12-25|, 
	|2021-01-01|
]
var brands = [ {
	"brand": "Tesla"
}, {
	"brand": "BMW"
}, {
	"brand": "Lexus"
}]
var models = [{
	"brand": "Tesla",
	"vehicleType": "Sedan",
	"prices": {
		"Model S Price": "79490",
		"Model X Price": "84490",
		"Model 3 Price": "39990"
	}
},
{
	"brand": "BMW",
	"vehicleType": "SUV",
	"prices": {
		"M6 Convertible Price": "123295",
		"i8 Coupe Price": "148495",
		"8-Series Price": "112895"
	}
},
{
	"brand": "Lexus",
	"vehicleType": "Sedan",
	"prices": {
		"ES 2018 Price": "40000",
		"UX 2019 Price": "32150",
		"UX HYBRID Price": "34500"
	}
}]

var objEmmodelsployee = {
	"name": "Joey Tribbiani",
	"year": "2000",
	"location": "New York"
}
var objCar = {
	"name": "Joey Tribbiani",
	"car": "Tesla",
	"car": "Tesla1",
	"make": "2020",
	"price": "\$ 100,000"
}
---
{

	/*
	 *  Value -   $
	 *  Index -  $$
	 */
	//User of filer
	
	"filter array eg.1 ": dateOfJoining filter ($.year>2014),
	"filter array eg.2 ": dateOfJoining filter ($$ == 0),
	
	
	/*
	 *  Key   -   $$ 
	 *  Value -   $
	 *  Index -  $$$
	 */
	"filter obj e.g 1 ": objCar filterObject ((value,key) -> value contains "Tesla"),
	"filter obj e.g 2 ": objCar filterObject ((value,key,index) -> index == 0),
	"filter obj e.g 3 ": objCar filterObject ( $$$ == 0),	
	"filter obj e.g 4 ": objCar filterObject ( $$ ~= "name"),
	"filter obj e.g 5 ": objCar filterObject ( $ == "2020"),	
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="core modules functions- groupby, isempty, joinby, log map,recursion,pluck zip,unzip, flatten,reduce" doc:id="25fffa84-e2f3-45ea-85f7-58b053d2dd76" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var employees = [
	"Ross Geller", 
	"Chandler Bing", 
	"Rachel Green", 
	"Joey Tribbiani"
]
var dateOfJoining = [
	|2020-09-28|,
	|2015-01-01|, 
	|2010-10-10|, 
	|2012-03-25|, 
	|2018-09-28|
]
var contractors = [
	"Jake Peralta", 
	"Ron Swanson", 
	"Leslie Knope",
	"Joey Tribbiani"
]
var contractEndDate = [ 
	|2020-12-25|, 
	|2021-01-01|
]
var brands = [ {
	"brand": "Tesla"
}, {
	"brand": "BMW"
}, {
	"brand": "Lexus"
}]
var models = [{
	"brand": "Tesla",
	"vehicleType": "Sedan",
	"prices": {
		"Model S Price": "79490",
		"Model X Price": "84490",
		"Model 3 Price": "39990"
	}
},
{
	"brand": "BMW",
	"vehicleType": "SUV",
	"prices": {
		"M6 Convertible Price": "123295",
		"i8 Coupe Price": "148495",
		"8-Series Price": "112895"
	}
},
{
	"brand": "Lexus",
	"vehicleType": "Sedan",
	"prices": {
		"ES 2018 Price": "40000",
		"UX 2019 Price": "32150",
		"UX HYBRID Price": "34500"
	}
}]
var objEmmodelsployee = {
	"name": "Joey Tribbiani",
	"year": "2000",
	"location": "New York"
}
var objCar = {
	"name": "Joey Tribbiani",
	"car": "Tesla",
	"car": "Tesla1",
	"make": "2020",
	"price": "\$ 100,000"
}
var checkEmp=""
var address=["vill bhour", "po Kanaid", "mandi", "175019" ]
fun func(obj)= obj mapObject (value,key) -> {
	(key) : value match {
		case is String -> if(key ~= "name" or key ~= "email" ) value replace /[a-z]/ with ("*") else value
		case is Date -> value
		case is Object -> func(value)
		else -> ""
	}
}

var recuvar={
	"name": "Rohit",
	"doj": |2020-02-03|,
	
	"address" : {
		"email":"Nana@na.com",
		"vill" : "bhour",
		"po" : "Kanaid",
		"distt" : "mandi",
		"pin" : "175019"
	}
}

var reduceVar = [ {"brand": "Tesla", "model": "S", "price": "79490"},
{"brand": "BMW", "model": "M6", "price": "123295"},
{"brand": "Tesla", "model": "X", "price": "84490"},
{"brand": "Lexus", "model": "ES", "price": "40000"},
{"brand": "Lexus", "model": "UX", "price": "32150"},
{"brand": "BMW", "model": "I8", "price": "148495"},
{"brand": "BMW", "model": "8-Series", "price": "112895"}
]
---
{
	// Find function return index value
	"Find fun": contractors find "Leslie Knope",
	// groupBy function return mathcing values in a group
	"groupBy fun": models groupBy (item) -> item.vehicleType,
	"groupBy fun": models groupBy $.brand,
	// isEmpty function return 
	"isEmpty fun": not isEmpty(checkEmp),
	"isEmpty fun": isEmpty(checkEmp),
	// joinBy function Merges an array into a single string value and uses the provided string as a separator between each item in the list.
	"joinBy fun": address joinBy(", "),
	// log fun returns the input as a system log
	"log fun": log("INFO: ", address joinBy(", ")),
	// Map and map object
	"map" : employees map (value,index) -> {
		"name": value
	},
	"map" : employees map  ("$$": $),
	"map" : brands map {
		"name" : $.brand
	},
	"map object" : objCar mapObject (value, key, index) ->{
		(index):{
			(key):value
		}
	},
	"map object" : objCar mapObject {
		($$$) :
			($$): $
	},
	"map object" : models map($ mapObject {
		($$$) :
			($$): $
	}),
	
	//recursion
	"response": func(objEmmodelsployee),
	
	
	//pluck
	"response": func(recuvar),
		"response": objEmmodelsployee pluck (value,key,index) -> (key):value,
	
	//orderBy
	"response": models orderBy $.brand,
	
	//zip unzip flatten fun
	"response":  employees zip dateOfJoining,
	"response":  unzip(employees zip dateOfJoining),
	"response":  flatten(unzip(employees zip dateOfJoining)),
	
	//reduce
	
	"response": models reduce (item, acc={}) -> acc ++ {"carname" : item.brand},
	
	"response": reduceVar reduce (item, acc ={
		Tesla: {Price:0},
		BMW: {Price:0},
		Lexus: {Price:0}
		}) -> acc - (item.brand) ++ (item.brand) :{Price: item.price + acc[(item.brand)].Price}
		
		
	
	}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="String module function - camelize,dasherize,capitalize, is number" doc:id="68a72f8b-f5c0-4b3f-a153-e452f263cfd7" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json

import * from dw::core::Strings

var dateOfJoining = [
	|2020-09-28|,
	|2015-01-01|, 
	|2010-10-10|, 
	|2012-03-25|, 
	|2018-09-28|
]
var contractors = [
	"Jake Peralta", 
	"Ron Swanson", 
	"Leslie Knope",
	"Joey Tribbiani"
]
var contractEndDate = [ 
	|2020-12-25|, 
	|2021-01-01|
]
var brands = [ {
	"brand": "Tesla"
}, {
	"brand": "BMW"
}, {
	"brand": "Lexus"
}]
var models = [{
	"brand": "Tesla",
	"vehicleType": "Sedan",
	"prices": {
		"Model S Price": "79490",
		"Model X Price": "84490",
		"Model 3 Price": "39990"
	}
},
{
	"brand": "BMW",
	"vehicleType": "SUV",
	"prices": {
		"M6 Convertible Price": "123295",
		"i8 Coupe Price": "148495",
		"8-Series Price": "112895"
	}
},
{
	"brand": "Lexus",
	"vehicleType": "Sedan",
	"prices": {
		"ES 2018 Price": "40000",
		"UX 2019 Price": "32150",
		"UX HYBRID Price": "34500"
	}
}]
var objEmmodelsployee = {
	"name": "Joey Tribbiani",
	"year": "2000",
	"location": "New York"
}
var objCar = {
	"name": "Joey Tribbiani",
	"car": "Tesla",
	"car": "Tesla1",
	"make": "2020",
	"price": "\$ 100,000"
}
var checkEmp=""
var address=["vill bhour", "po Kanaid", "mandi", "175019" ]
fun func(obj)= obj mapObject (value,key) -> {
	(key) : value match {
		case is String -> if(key ~= "name" or key ~= "email" ) value replace /[a-z]/ with ("*") else value
		case is Date -> value
		case is Object -> func(value)
		else -> ""
	}
}

var recuvar={
	"name": "Rohit",
	"doj": |2020-02-03|,
	
	"address" : {
		"email":"Nana@na.com",
		"vill" : "bhour",
		"po" : "Kanaid",
		"distt" : "mandi",
		"pin" : "175019"
	}
}


var employees = [
	"ross geller", 
	"Chandler Bing", 
	"Rachel Green", 
	"Joey Tribbiani"
]
---

{
	//camelize
	
	"response" :camelize(employees[1]),
	
	//capitalize
	
	"response" :capitalize(employees[0]),
	
	//dasherize
	
	"response" :dasherize(employees[0]) ,
	
	//isNumeric
	
	"response" :isNumeric(employees[0]),
	
	
	//pluralize singularize
	
	"response" :singularize(pluralize(employees[0])),
	
	//repeat
	
	"response" : repeat("*",10),
	
	//sizeOf
	
	"response" : sizeOf(employees[0]),
	
	
	//subString
	
	"response" : substringAfter(employees[0],"s"),
	"response" : substringAfterLast(employees[0],"s"),
	"response" : substringBefore(employees[0],"s"),
	"response" : substringBeforeLast(employees[0],"s"),
	
	
}




]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Array Module Function- Index of, join,Inner join, outerjoin" doc:id="c9da4900-8aaa-4b36-b132-d84305cabfc1" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json

import * from dw::core::Arrays

var dateOfJoining = [
	|2020-09-28|,
	|2015-01-01|, 
	|2010-10-10|, 
	|2012-03-25|, 
	|2018-09-28|
]
var contractors = [
	"Jake Peralta", 
	"Ron Swanson", 
	"Leslie Knope",
	"Joey Tribbiani"
]
var contractEndDate = [ 
	|2020-12-25|, 
	|2021-01-01|
]
var brands = [ {
	"brand": "Tesla"
}, {
	"brand": "BMW"
}, {
	"brand": "Lexus"
},{
	"brand": "VAA"
}]
var models = [{
	"brand": "Tesla",
	"vehicleType": "Sedan",
	"prices": {
		"Model S Price": "79490",
		"Model X Price": "84490",
		"Model 3 Price": "39990"
	}
},
{
	"brand": "BMW",
	"vehicleType": "SUV",
	"prices": {
		"M6 Convertible Price": "123295",
		"i8 Coupe Price": "148495",
		"8-Series Price": "112895"
	}
},{
	"brand": "NONU",
	"vehicleType": "SUV",
	"prices": {
		"M6 Convertible Price": "123295",
		"i8 Coupe Price": "148495",
		"8-Series Price": "112895"
	}
},
{
	"brand": "Lexus",
	"vehicleType": "Sedan",
	"prices": {
		"ES 2018 Price": "40000",
		"UX 2019 Price": "32150",
		"UX HYBRID Price": "34500"
	}
}]
var objEmmodelsployee = {
	"name": "Joey Tribbiani",
	"year": "2000",
	"location": "New York"
}
var objCar = {
	"name": "Joey Tribbiani",
	"car": "Tesla",
	"car": "Tesla1",
	"make": "2020",
	"price": "\$ 100,000"
}
var checkEmp=""
var address=["vill bhour", "po Kanaid", "mandi", "175019" ]
fun func(obj)= obj mapObject (value,key) -> {
	(key) : value match {
		case is String -> if(key ~= "name" or key ~= "email" ) value replace /[a-z]/ with ("*") else value
		case is Date -> value
		case is Object -> func(value)
		else -> ""
	}
}

var recuvar={
	"name": "Rohit",
	"doj": |2020-02-03|,
	
	"address" : {
		"email":"Nana@na.com",
		"vill" : "bhour",
		"po" : "Kanaid",
		"distt" : "mandi",
		"pin" : "175019"
	}
}


var employees = [
	"ross geller", 
	"ross geller", 
	"Chandler Bing", 
	"Rachel Green", 
	"Joey Tribbiani"
]
---
{
	"Response":employees countBy  $ == "ross geller",
	"Response": employees some  $ == "ross geller",
	"res":  join(brands, models, (car) -> car.brand, (model) -> model.brand),
	"res":  leftJoin(brands, models, (car) -> car.brand, (model) -> model.brand),
	"res":  outerJoin(brands, models, (car) -> car.brand, (model) -> model.brand)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Object  &amp; Runtime Module Functions-KeySet, ValueSet, merge" doc:id="de4b75d2-c683-48ee-b058-2b3a52ba60ca" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json

import * from dw::core::Objects
import * from dw::Runtime

var dateOfJoining = [
	|2020-09-28|,
	|2015-01-01|, 
	|2010-10-10|, 
	|2012-03-25|, 
	|2018-09-28|
]
var contractors = [
	"Jake Peralta", 
	"Ron Swanson", 
	"Leslie Knope",
	"Joey Tribbiani"
]
var contractEndDate = [ 
	|2020-12-25|, 
	|2021-01-01|
]
var brands = [ {
	"brand": "Tesla"
}, {
	"brand": "BMW"
}, {
	"brand": "Lexus"
},{
	"brand": "VAA"
}]
var models = [{
	"brand": "Tesla",
	"vehicleType": "Sedan",
	"prices": {
		"Model S Price": "79490",
		"Model X Price": "84490",
		"Model 3 Price": "39990"
	}
},
{
	"brand": "BMW",
	"vehicleType": "SUV",
	"prices": {
		"M6 Convertible Price": "123295",
		"i8 Coupe Price": "148495",
		"8-Series Price": "112895"
	}
},{
	"brand": "NONU",
	"vehicleType": "SUV",
	"prices": {
		"M6 Convertible Price": "123295",
		"i8 Coupe Price": "148495",
		"8-Series Price": "112895"
	}
},
{
	"brand": "Lexus",
	"vehicleType": "Sedan",
	"prices": {
		"ES 2018 Price": "40000",
		"UX 2019 Price": "32150",
		"UX HYBRID Price": "34500"
	}
}]
var objEmmodelsployee = {
	"name": "Joey Tribbiani",
	"year": "2000",
	"location": "New York"
}
var objCar = {
	"name": "Joey Tribbiani",
	"car": "Tesla",
	"car": "Tesla1",
	"make": "2020",
	"price": "\$ 100,000"
}
var checkEmp=""
var address=["vill bhour", "po Kanaid", "mandi", "175019" ]
fun func(obj)= obj mapObject (value,key) -> {
	(key) : value match {
		case is String -> if(key ~= "name" or key ~= "email" ) value replace /[a-z]/ with ("*") else value
		case is Date -> value
		case is Object -> func(value)
		else -> ""
	}
}

var recuvar={
	"name": "Rohit",
	"doj": |2020-02-03|,
	
	"address" : {
		"email":"Nana@na.com",
		"vill" : "bhour",
		"po" : "Kanaid",
		"distt" : "mandi",
		"pin" : "175019"
	}
}


var employees = [
	"ross geller", 
	"ross geller", 
	"Chandler Bing", 
	"Rachel Green", 
	"Joey Tribbiani"
]
---
{
	"Response":keySet(models[0]),
	"Response":valueSet(models[0]),
	"Response":entrySet(models[0]),
	"Response":mergeWith(models[0],brands[0]),
	//Runtime//
	
Reponse: do{	
	var tryvar = try(() -> 2/0)
	---
	tryvar.error.message
	}	
	}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="4d1b1edb-b7de-4415-bf25-66e44ebaa373" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json

import modules::mycus
---
{

	"reponse2": mycus::main([])
	
	
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dwFlow3" doc:id="61ace966-22a9-418e-a02d-32ee50734d0b" >
		<http:listener doc:name="Listener" doc:id="4b678517-2151-4007-bd60-798083eb1e55" config-ref="HTTP_Listener_config" path="/call2"/>
		<java:new doc:name="New" doc:id="dd83b0ed-0f1e-43d7-9e07-02e33869ccde" class="dw.Person" target="pObj" constructor="Person(java.lang.String,java.lang.Integer)">
			<java:args ><![CDATA[#[{
	name: "Rohit",
	age: 24
}]]]></java:args>
		</java:new>
		<java:invoke doc:name="Invoke" doc:id="e9d5ecdf-2345-4662-af27-bcefa360854c" instance='#[vars.pObj]' class="dw.Person" target="Pvar" method="getAge()"/>
		<ee:transform doc:name="Transform Message" doc:id="c56ff7c6-05d0-4b85-91cf-e597af42ab81" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"re": vars.Pvar
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dwFlow2" doc:id="ea5135ae-ab6e-432d-8a0f-47f4cc29fa70">
		<http:listener doc:name="Listener" doc:id="900c27e7-59dd-4909-9d5c-2d569566ca88" config-ref="HTTP_Listener_config" path="/call" />
		<set-variable value="I am" doc:name="Set Variable" doc:id="36eb9e79-3b94-4e02-8d05-31e2f30769ae" variableName="who"/>
		<ee:transform doc:name="Transform Message" doc:id="f3eefd16-6c32-43b2-be38-e018f871753d">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json

import * from dw::core::Objects
import * from dw::Runtime

var dateOfJoining = [
	|2020-09-28|,
	|2015-01-01|, 
	|2010-10-10|, 
	|2012-03-25|, 
	|2018-09-28|
]
var contractors = [
	"Jake Peralta", 
	"Ron Swanson", 
	"Leslie Knope",
	"Joey Tribbiani"
]
var contractEndDate = [ 
	|2020-12-25|, 
	|2021-01-01|
]
var brands = [ {
	"brand": "Tesla"
}, {
	"brand": "BMW"
}, {
	"brand": "Lexus"
},{
	"brand": "VAA"
}]
var models = [{
	"brand": "Tesla",
	"vehicleType": "Sedan",
	"prices": {
		"Model S Price": "79490",
		"Model X Price": "84490",
		"Model 3 Price": "39990"
	}
},
{
	"brand": "BMW",
	"vehicleType": "SUV",
	"prices": {
		"M6 Convertible Price": "123295",
		"i8 Coupe Price": "148495",
		"8-Series Price": "112895"
	}
},{
	"brand": "NONU",
	"vehicleType": "SUV",
	"prices": {
		"M6 Convertible Price": "123295",
		"i8 Coupe Price": "148495",
		"8-Series Price": "112895"
	}
},
{
	"brand": "Lexus",
	"vehicleType": "Sedan",
	"prices": {
		"ES 2018 Price": "40000",
		"UX 2019 Price": "32150",
		"UX HYBRID Price": "34500"
	}
}]
var objEmmodelsployee = {
	"name": "Joey Tribbiani",
	"year": "2000",
	"location": "New York"
}
var objCar = {
	"name": "Joey Tribbiani",
	"car": "Tesla",
	"car": "Tesla1",
	"make": "2020",
	"price": "\$ 100,000"
}
var checkEmp=""
var address=["vill bhour", "po Kanaid", "mandi", "175019" ]
fun func(obj)= obj mapObject (value,key) -> {
	(key) : value match {
		case is String -> if(key ~= "name" or key ~= "email" ) value replace /[a-z]/ with ("*") else value
		case is Date -> value
		case is Object -> func(value)
		else -> ""
	}
}

var recuvar={
	"name": "Rohit",
	"doj": |2020-02-03|,
	
	"address" : {
		"email":"Nana@na.com",
		"vill" : "bhour",
		"po" : "Kanaid",
		"distt" : "mandi",
		"pin" : "175019"
	}
}


var employees = [
	"ross geller", 
	"ross geller", 
	"Chandler Bing", 
	"Rachel Green", 
	"Joey Tribbiani"
]
---
{
	"attribues request": attributes.requestUri,
	"attribues headers": attributes.headers,
	"attribues queryString": attributes.queryString,
	"payload": payload, 
	"vars" 	: vars.who	
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="a9cbdd5d-5197-4fad-a43e-de17d23ccaff" />
	</flow>
	<flow name="dwFlow4" doc:id="0216ea5d-b6c5-447d-8b82-c2a4f76ba76e" >
		<http:listener doc:name="Listener" doc:id="cc49c3e2-c85f-40f6-a2cd-21c85b565e3d" config-ref="HTTP_Listener_config" path="/call3"/>
		<ee:transform doc:name="Transform Message" doc:id="7e186f81-a45d-4d5d-bb35-007d130ce2e4" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var stocks= readUrl("classpath://portfolio.csv","application/csv")

fun todayRet(total_shares,today_closing_price,yesterday_closing_price) 
=	total_shares*(today_closing_price - yesterday_closing_price)
fun totalRet(total_shares,today_closing_price,avg_purchase_price)
=	total_shares * (today_closing_price-avg_purchase_price)

fun analystRec(stock)
=	if ( totalRet(stock.total_shares,stock.today_closing_price,stock.avg_purchase_price)> 0 and (stock.today_closing_price<0.85*stock.year_high)) 
	"Buy"
	else if	(totalRet(stock.total_shares,stock.today_closing_price,stock.avg_purchase_price)> 0 and (stock.today_closing_price<1.2*stock.year_low)) 
	"HOLD"
	else "Sell"
ns stockBroker http//bvabadcas	

output application/xml
---
{ "port":{ stocks: stocks map({
	
	(stockName: if (not isEmpty($.stock_name)) $.stock_name else null ),
	(stockCode: $.stock_code default "NA"),
	(totolShares : if (not isEmpty($.total_shares)) $.total_shares else null),
	(avgPrice : if (not isEmpty($.avg_purchase_price)) $.avg_purchase_price else null),
	(returns @(lastPrice :$.yesterday_closing_price,
				ClosingPrice:$.today_closing_price
		
	):{
		
		todaysReturn:todayRet($.total_shares,$.today_closing_price,$.yesterday_closing_price) ,
		totalReturn:totalRet($.total_shares,$.today_closing_price,$.avg_purchase_price) 
	})if((not isEmpty($.avg_purchase_price)) and (not isEmpty($.today_closing_price)) ),
	(stockBroker#analystRecom: analystRec($))
}) filter($.stockName != null)}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dwFlow5" doc:id="b4ed7079-be72-474e-92d1-1a19ff8ece3e" >
		<scheduler doc:name="Scheduler" doc:id="4cc72e11-a5b0-4ff2-a35a-64b41e56f43c" >
			<scheduling-strategy >
				<fixed-frequency />
			</scheduling-strategy>
		</scheduler>
		<ftp:list doc:name="List" doc:id="ecab4655-b264-4644-a5c9-aa272b8d6912" config-ref="FTP_Config" directoryPath="/input">
			<ftp:matcher filenamePattern="*csv" />
		</ftp:list>
		<ftp:write doc:name="Write" doc:id="efe5828a-b84f-4ec2-8be1-b256a4f9685a" config-ref="FTP_Config" path='#[payload.*id ++ ".csv"]'/>
		<logger level="INFO" doc:name="Logger" doc:id="9fd03acf-de4e-4123-b001-5ad5fe49d67a" message="#[payload]"/>
	</flow>
</mule>
